# Cars Racing Game

A Unity-based car racing game featuring player vs AI competition with checkpoint-based racing, collectible items, and multiple camera perspectives. Players race against AI opponents that follow predefined waypoint paths around various tracks.

## Game Overview

This is a 3D car racing game where players compete against AI-controlled vehicles on multiple tracks. The game features a comprehensive racing system with checkpoints, lap tracking, collectible items, and various camera angles to enhance the racing experience.

### Key Features

**Racing Mechanics**
- Player-controlled car with realistic physics and handling
- AI opponents that follow waypoint-based pathfinding
- Checkpoint system for lap tracking and race progression
- Multiple racing tracks with different layouts
- Real-time leaderboard and position tracking

**Car Systems**
- Realistic car physics with wheel colliders and suspension
- Multiple camera perspectives (normal, top-down, rear view)
- Car selection system with different vehicle models
- Automatic car flipping system for stuck vehicles
- Speed-sensitive steering and braking mechanics

**Collectible Items**
- Coins for currency collection
- Health packs to restore vehicle health
- Speed boost power-ups
- Interactive inventory system for item management
- Item spawning system throughout tracks

**AI Behavior**
- Waypoint-based pathfinding for realistic racing lines
- Collision avoidance system for dynamic obstacle navigation
- Adjustable AI difficulty and racing behavior
- Multiple AI opponents per race

## Technical Implementation

### Core Racing Systems

**Car Physics (`CarBehaviour.cs`)**
- Unity wheel collider system for realistic vehicle dynamics
- Center of gravity adjustment for improved stability
- Ackermann steering geometry for authentic steering feel
- Downforce simulation for enhanced track grip
- Speed-limited acceleration and braking systems

**AI Controller (`AICarController.cs`)**
- Waypoint navigation system following predefined racing lines
- Dynamic steering calculation based on target angles
- Speed management for cornering and straightaways
- Collision avoidance integration with obstacle detection

**Checkpoint System (`CheckpointsController.cs`)**
- Sequential checkpoint validation for proper race progression
- Lap completion detection and tracking
- Race position calculation and leaderboard updates
- Finish line detection with win/lose conditions

### Game Flow Management

**Race Controller (`RaceController.cs`)**
- Race countdown system before start
- Timer tracking for race duration
- Race state management (pre-race, racing, finished)
- UI coordination for race information display

**Leaderboard System (`LeaderBoard.cs`)**
- Real-time position tracking based on checkpoint progress
- Multi-car registration and position sorting
- Dynamic leaderboard updates during race
- Final race results and winner determination

### Player Interaction

**Player Controller (`PlayerCarController.cs`)**
- Standard WASD/Arrow key controls for car movement
- Item collection and usage system
- Health and stats management
- Inventory integration for collected items

**Camera System (`CameraController.cs`, `CameraChanger.cs`)**
- Multiple camera types: front-facing, tracking, map view
- Smooth camera transitions and following behavior
- Manual camera switching with keyboard controls
- Position and rotation interpolation for smooth movement

### Item and Collectible Systems

**Collectibles (`Coin.cs`, `Health.cs`, `SpeedUp.cs`)**
- Rotating collectible items with visual feedback
- Interface-based item system for modular functionality
- Stat modification system for player benefits
- Automatic item effects and destruction on collection

**Inventory Management (`InventoryManager.cs`)**
- Visual inventory display with item icons
- Pick up and drop mechanics for items
- Stack-based item management (last in, first out)
- Dynamic UI updates for inventory changes

## Game Features

### Multi-Track Racing
- Multiple racing environments with unique layouts
- Track selection system with progression requirements
- Checkpoint-based navigation for complex track designs
- Varied track difficulty and length

### Vehicle Customization
- Car selection menu with multiple vehicle options
- Visual car previews in selection interface
- Player preference saving for selected vehicles
- Dynamic car spawning based on player choice

### Progression System
- Currency collection through coin pickups
- Track unlocking based on money requirements
- Performance tracking and statistics
- Persistent data saving between sessions

### Visual Effects
- Particle effects for environmental ambiance
- Brake light activation during braking
- Floating animation for collectible items
- UI feedback for player actions and race events

## Controls

**Player Car Controls:**
- **W/S or Up/Down Arrow**: Accelerate/Reverse
- **A/D or Left/Right Arrow**: Steering
- **Space**: Brake
- **E**: Pick up items
- **R**: Drop items
- **U**: Use items

**Camera Controls:**
- **Z**: Switch to top-down view
- **X**: Switch to rear view
- **C**: Switch to normal view

**UI Controls:**
- **H**: Toggle HUD visibility
- **Escape**: Pause menu

## Technical Architecture

### Interface System
The game uses a comprehensive interface system for modular functionality:
- `IControllable`: Player input handling
- `IDrivable`: Vehicle behavior contracts
- `IPickable`: Item collection mechanics
- `IUsable`: Item usage functionality
- `IModifyStats`: Character/vehicle stat modifications

### Modular Design
- Separation of concerns between physics, AI, UI, and game logic
- Component-based architecture for easy feature additions
- Event-driven systems for loose coupling between components
- Scriptable object patterns for data management

### Performance Considerations
- Object pooling for frequently spawned items
- Efficient collision detection using sphere overlap
- Optimized AI pathfinding with waypoint caching
- Level-of-detail considerations for distant objects

## Setup and Installation

1. **Requirements:**
   - Unity 2020.3 LTS or newer
   - Standard Unity packages (Physics, UI, etc.)

2. **Project Structure:**
   - Organized script folders by functionality
   - Separate scenes for menus, car selection, and racing tracks
   - Prefab system for cars, collectibles, and UI elements

3. **Configuration:**
   - Set up racing tracks with checkpoint sequences
   - Configure AI waypoint paths for each track
   - Adjust car physics parameters for desired handling
   - Set up UI canvases and HUD elements

## Game Flow

1. **Main Menu**: Player starts from main menu with play/quit options
2. **Car Selection**: Choose from available car models
3. **Track Selection**: Select racing track (some require currency)
4. **Race Setup**: Race countdown and preparation
5. **Racing**: Active racing with AI opponents
6. **Race Complete**: Results display and progression options

## Future Enhancement Possibilities

- **Multiplayer Support**: Network racing with multiple human players
- **Advanced AI**: Machine learning-based AI opponents
- **Track Editor**: In-game track creation tools
- **More Collectibles**: Additional power-ups and items
- **Weather System**: Dynamic weather affecting race conditions
- **Achievement System**: Unlockable achievements and rewards

---

This racing game demonstrates comprehensive Unity development skills including physics simulation, AI pathfinding, UI systems, and game state management, providing an engaging single-player racing experience with room for future expansion.
